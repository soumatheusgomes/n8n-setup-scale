########################
# Volumes & Networks   #
########################
volumes:
  n8n_data: # n8n workflow and credential storage
  redis_data: # Redis persistence (optional)
  traefik_letsencrypt: # ACME certificates (Traefik TLS mode)
  postgres_data:
    # Local Postgres data (dblocal profile)

networks:
  proxy: { external: true } # Traefik attaches here (profile tls)
  backend: { driver: bridge } # private network for core services

################
# Global helpers
################
x-logging:
  # reusable logging definition
  &logging
  logging:
    driver: json-file
    options: { max-size: "10m", max-file: "3" }

# Default n8n environment block (overridden per service)
x-n8n-env: &n8n-env
  NODE_ENV: production
  N8N_RUNNERS_ENABLED: "true"
  # protocol/host/port are loaded from .env or fallback
  N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
  N8N_HOST: ${N8N_HOST:-localhost}
  N8N_PORT: "5678"
  # If WEBHOOK_URL is unset, n8n will craft it automatically
  WEBHOOK_URL: ${WEBHOOK_URL:-}
  GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-UTC}

  # Execution queue settings
  EXECUTIONS_MODE: queue
  EXECUTIONS_DATA_SAVE_ON_ERROR: none
  EXECUTIONS_DATA_SAVE_ON_SUCCESS: none

  # BullMQ / Redis
  QUEUE_BULL_REDIS_HOST: redis
  QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
  QUEUE_HEALTH_CHECK_ACTIVE: "true"

  # Postgres connection (container `postgres` if dblocal profile is enabled)
  DB_TYPE: postgresdb
  DB_POSTGRESDB_HOST: ${POSTGRES_HOST:-postgres}
  DB_POSTGRESDB_PORT: ${POSTGRES_PORT:-5432}
  DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
  DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
  DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8n}
  DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: "false"

  # N8N Configs
  N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
  N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
  OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: "true"
  # SMTP
  N8N_SMTP_HOST: ${SMTP_HOST:-}
  N8N_SMTP_PORT: ${SMTP_PORT:-}
  N8N_SMTP_USER: ${SMTP_USER:-}
  N8N_SMTP_PASS: ${SMTP_PASS:-}
  N8N_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME:-}
  N8N_SMTP_SENDER_EMAIL: ${SMTP_SENDER_EMAIL:-}

################
# Services
################
services:
  #################################################################
  # Traefik – only started when profile `tls` is enabled          #
  #################################################################
  traefik:
    profiles: [ "tls" ]
    image: traefik:latest
    <<: *logging
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${EMAIL:-admin@example.com}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    ports: [ "80:80", "443:443" ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks: [ proxy ]
    restart: unless-stopped

  #################################################################
  # PostgreSQL – local database (profile `dblocal`)               #
  #################################################################
  postgres:
    profiles: [ "dblocal" ]
    image: postgres:17-alpine
    <<: *logging
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n}" ]
    networks: [ backend ]

  #################################################################
  # Redis – BullMQ queue backend                                  #
  #################################################################
  redis:
    image: redis:7-alpine
    <<: *logging
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ backend ]
    restart: unless-stopped

  #################################################################
  # Browserless – headless Chrome                                 #
  #################################################################
  browserless:
    profiles: [ "browserless" ]
    image: browserless/chrome:latest
    <<: *logging
    environment:
      TOKEN: ${BROWSERLESS_TOKEN:-development}
      MAX_CONCURRENT_SESSIONS: "5"
      DEBUG: "browserless:*"
      CONNECTION_TIMEOUT: "60000"
      MAX_QUEUE_LENGTH: "20"
      DEMO_MODE: "false"
      ENABLE_DEBUGGER: "false"
      PORT: "3000"
      WORKSPACE_DELETE_EXPIRED: "true"
      WORKSPACE_EXPIRE_DAYS: "1"
    networks: [ backend ]
    restart: unless-stopped

  #################################################################
  # n8n Web interface                                             #
  #################################################################
  n8n:
    image: n8nio/n8n:latest
    <<: *logging
    environment:
      <<: *n8n-env
    volumes: [ n8n_data:/home/node/.n8n ]
    depends_on:
      redis: { condition: service_healthy }
    networks: [ proxy, backend ]
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${N8N_HOST:-localhost}`)
      - traefik.http.routers.n8n.entrypoints=websecure
      - traefik.http.routers.n8n.tls.certresolver=le

  #################################################################
  # n8n Worker                                                    #
  #################################################################
  n8n-worker:
    image: n8nio/n8n:latest
    <<: *logging
    environment:
      <<: *n8n-env
    command: worker
    depends_on:
      redis: { condition: service_healthy }
    networks: [ backend ]
    restart: unless-stopped
    # worker replicas are defined at runtime via update-stack.sh
