version: "3.9"

########################
# Volumes & Networks   #
########################
volumes:
  n8n_data:              # n8n workflow and credential storage
  redis_data:            # Redis persistence (optional)
  traefik_letsencrypt:   # ACME certificates (Traefik TLS mode)
  postgres_data:         # Local Postgres data (dblocal profile)

networks:
  proxy:   { external: true }      # Traefik attaches here (profile tls)
  backend: { driver: bridge }      # private network for core services

################
# Global helpers
################
x-logging: &logging                # reusable logging definition
  logging:
    driver: json-file
    options: { max-size: "10m", max-file: "3" }

# Default n8n environment block (overridden per service)
x-n8n-env: &n8n-env
  NODE_ENV: production
  # protocol/host/port are loaded from .env or fallback
  N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
  N8N_HOST:     ${N8N_HOST:-localhost}
  N8N_PORT: "5678"
  # If WEBHOOK_URL is unset, n8n will craft it automatically
  WEBHOOK_URL: ${WEBHOOK_URL:-}
  GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-UTC}

  # Execution queue settings
  EXECUTIONS_MODE: queue
  EXECUTIONS_DATA_SAVE_ON_ERROR: none
  EXECUTIONS_DATA_SAVE_ON_SUCCESS: none

  # BullMQ / Redis
  QUEUE_BULL_REDIS_HOST: redis
  QUEUE_BULL_REDIS_PASSWORD_FILE: /run/secrets/redis_password
  QUEUE_HEALTH_CHECK_ACTIVE: "true"

  # Postgres connection (container `postgres` if dblocal profile is enabled)
  DB_TYPE: postgresdb
  DB_POSTGRESDB_HOST:     ${POSTGRES_HOST:-postgres}
  DB_POSTGRESDB_PORT:     ${POSTGRES_PORT:-5432}
  DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
  DB_POSTGRESDB_USER:     ${POSTGRES_USER:-n8n}
  DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8n}
  DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: "false"

################
# Services
################
services:
  #################################################################
  # Traefik – only started when profile `tls` is enabled          #
  #################################################################
  traefik:
    profiles: ["tls"]
    image: traefik:latest
    <<: *logging
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${EMAIL:-admin@example.com}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    ports: ["80:80", "443:443"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks: [proxy]
    restart: unless-stopped

  #################################################################
  # PostgreSQL – local database (profile `dblocal`)               #
  #################################################################
  postgres:
    profiles: ["dblocal"]
    image: postgres:latest-alpine
    <<: *logging
    restart: unless-stopped
    environment:
      POSTGRES_DB:       ${POSTGRES_DB:-n8n}
      POSTGRES_USER:     ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n}"]
    secrets: [postgres_password]
    networks: [backend]

  #################################################################
  # Redis – BullMQ queue backend                                  #
  #################################################################
  redis:
    image: redis:alpine
    <<: *logging
    command: ["redis-server","--requirepass","$(cat /run/secrets/redis_password)"]
    volumes: [redis_data:/data]
    healthcheck:
      test: ["CMD","redis-cli","-a","$(cat /run/secrets/redis_password)","ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets: [redis_password]
    networks: [backend]
    restart: unless-stopped

  #################################################################
  # Browserless – headless Chrome                                 #
  #################################################################
  browserless:
    image: browserless/chrome:latest
    <<: *logging
    environment:
      TOKEN: ${BROWSERLESS_TOKEN:-demo}
      MAX_CONCURRENT_SESSIONS: "5"
    networks: [backend]
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  #################################################################
  # n8n Web interface                                             #
  #################################################################
  n8n:
    image: matheus/n8n-custom:latest
    <<: *logging
    environment:
      <<: *n8n-env
      N8N_ENCRYPTION_KEY_FILE: /run/secrets/n8n_encryption_key
    secrets: [n8n_encryption_key, redis_password]
    volumes: [n8n_data:/home/node/.n8n]
    depends_on:
      redis: { condition: service_healthy }
    networks: [proxy, backend]   # `proxy` exists only when tls profile is active
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${N8N_HOST:-localhost}`)
      - traefik.http.routers.n8n.entrypoints=websecure
      - traefik.http.routers.n8n.tls.certresolver=le

  #################################################################
  # n8n Worker                                                    #
  #################################################################
  n8n-worker:
    image: matheus/n8n-custom:latest
    <<: *logging
    environment:
      <<: *n8n-env
      N8N_ENCRYPTION_KEY_FILE: /run/secrets/n8n_encryption_key
    secrets: [n8n_encryption_key, redis_password]
    command: n8n worker
    depends_on:
      redis: { condition: service_healthy }
    networks: [backend]
    restart: unless-stopped
    # worker replicas are defined at runtime via update-stack.sh

################
# Secrets definitions
################
secrets:
  n8n_encryption_key: { file: ./secrets/n8n_encryption_key.txt }
  redis_password:     { file: ./secrets/redis_password.txt }
  postgres_password:  { file: ./secrets/postgres_password.txt }